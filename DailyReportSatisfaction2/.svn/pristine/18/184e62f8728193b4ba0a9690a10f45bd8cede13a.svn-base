
package service;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson.JacksonFactory;
import com.google.gdata.client.spreadsheet.FeedURLFactory;
import com.google.gdata.client.spreadsheet.ListQuery;
import com.google.gdata.client.spreadsheet.SpreadsheetQuery;
import com.google.gdata.client.spreadsheet.SpreadsheetService;
import com.google.gdata.client.spreadsheet.WorksheetQuery;
import com.google.gdata.data.spreadsheet.CustomElementCollection;
import com.google.gdata.data.spreadsheet.ListEntry;
import com.google.gdata.data.spreadsheet.ListFeed;
import com.google.gdata.data.spreadsheet.SpreadsheetEntry;
import com.google.gdata.data.spreadsheet.SpreadsheetFeed;
import com.google.gdata.data.spreadsheet.WorksheetEntry;
import com.google.gdata.data.spreadsheet.WorksheetFeed;
import com.google.gdata.util.ServiceException;

import db.ConfigDao;
import db.DraftDao;
import db.MailDao;
import db.PointDao;
import db.TemplateDao;
import db.TemplateRuleDao;
import db.UserDao;
import domain.Config;
import domain.Draft;
//import db.TemplateDao;
import domain.Point;
import domain.ReceiveMail;
import domain.Template;
import domain.TemplateRule;
import domain.User;
import domain.valueo.DepartmentID;
import domain.valueo.DraftID;
import domain.valueo.Goal;
import domain.valueo.PointID;
import domain.valueo.Purpose;
import domain.valueo.TemplateID;
import domain.valueo.TemplateItemType;
import domain.valueo.Text;
import domain.valueo.UserID;
import domain.valueo.WeekDay;
import service.bean.GoalBean;

public class EditService extends Service {
	private MailDao mdao;
	// private TemplateDao tdao;
	private ConfigDao cdao;
	private PointDao pdao;
	private DraftDao ddao;
	private TemplateDao tdao;
	private TemplateRuleDao trdao;
	private UserDao udao;

	@Override
	void prePare() {
		this.mdao = new MailDao(this.con);
		// this.tdao = new TemplateDao(this.con);
		this.cdao = new ConfigDao(this.con);
		this.pdao = new PointDao(this.con);
		this.ddao = new DraftDao(this.con);
		this.tdao = new TemplateDao(this.con);
		this.trdao = new TemplateRuleDao(this.con);
		this.udao = new UserDao(this.con);
	}

	// めーるしゅとく
	public List<ReceiveMail> getReceiveMail(UserID userID) {
		List<ReceiveMail> receiveMailList = new ArrayList<ReceiveMail>();

		try {
			receiveMailList = mdao.getReceiveMail(userID);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return receiveMailList;

	}

	// //Gmail版メール取得
	public List<ReceiveMail> getReceiveMail2(UserID userID) {
		List<ReceiveMail> receiveMailList = new ArrayList<ReceiveMail>();

		String host = "imap.gmail.com";
		int port = 993;
		String user = "centralsoft.train2016@gmail.com";
		String password = "train2016";
		String target_folder = "INBOX";
		Store st = null;

		try {

			// Properties props = System.getProperties();
			Properties props = new Properties();
			Session sess = Session.getInstance(props, null);
			// sess.setDebug(true);

			st = sess.getStore("imaps");
			st.connect(host, port, user, password);
			Folder fol = st.getFolder(target_folder);

			if (fol.exists()) {
				for (Folder f : fol.list()) {
					System.out.println(f.getName());
				}

				fol.open(Folder.READ_ONLY);
				for (Message m : fol.getMessages()) {
					System.out.printf("%s - %d\n", m.getSubject(), m.getSize());
					ReceiveMail mail = new ReceiveMail();
					mail.setTitle(m.getSubject());
					mail.setText(m.getContent().toString());
					mail.setRecieveMailId(String.valueOf(m.getMessageNumber()));
					mail.setUserId(userID.getUserID());
					receiveMailList.add(mail);
				}
				fol.close(false);
			} else {
				System.out.printf("%s is not exist.", target_folder);
			}

		} catch (MessagingException | IOException e) {
			e.printStackTrace();
			throw new RuntimeException();
		} finally {
			try {
				st.close();
			} catch (MessagingException e) {
				e.printStackTrace();
				throw new RuntimeException();
			}
		}

		return receiveMailList;

	}

	public List<ReceiveMail> getMailText(String recieveMailId) {
		List<ReceiveMail> receiveMailList = new ArrayList<ReceiveMail>();
		try {
			receiveMailList = mdao.getMailText(recieveMailId);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return receiveMailList;
	}

	// Gmail版メール取得
	public List<ReceiveMail> getMailText2(String recieveMailId) {
		List<ReceiveMail> receiveMailList = new ArrayList<ReceiveMail>();

		String host = "imap.gmail.com";
		int port = 993;
		String user = "centralsoft.train2016@gmail.com";
		String password = "train2016";
		String target_folder = "INBOX";
		Store st = null;

		try {

			// Properties props = System.getProperties();
			Properties props = new Properties();
			Session sess = Session.getInstance(props, null);
			// sess.setDebug(true);

			st = sess.getStore("imaps");
			st.connect(host, port, user, password);
			Folder fol = st.getFolder(target_folder);

			if (fol.exists()) {
				for (Folder f : fol.list()) {
					System.out.println(f.getName());
				}

				fol.open(Folder.READ_ONLY);
				for (Message m : fol.getMessages()) {
					System.out.printf("%s - %d\n", m.getSubject(), m.getSize());
					ReceiveMail mail = new ReceiveMail();
					mail.setTitle(m.getSubject());
					mail.setText(m.getContent().toString());
					mail.setRecieveMailId(String.valueOf(m.getMessageNumber()));
					// mail.setUserId( userID.getUserID());
					if (recieveMailId != null && recieveMailId.equals(String.valueOf(m.getMessageNumber())))
						receiveMailList.add(mail);
				}
				fol.close(false);
			} else {
				System.out.printf("%s is not exist.", target_folder);
			}

		} catch (MessagingException | IOException e) {
			e.printStackTrace();
			throw new RuntimeException();
		} finally {
			try {
				st.close();
			} catch (MessagingException e) {
				e.printStackTrace();
				throw new RuntimeException();
			}
		}

		return receiveMailList;
	}

	// 編集サービス テンプレートの読み込み
	/*
	 * public List<Template> getTemplate() { List<Template> template; try {
	 * template = tdao.getTemplate(); } catch (SQLException e) { throw new
	 * RuntimeException(e); } return template; }
	 */

	// 指摘事項の読み込み
	public List<Point> getPoint(UserID userID) {
		List<Point> pointList;
		try {
			pointList = pdao.getPoint(userID);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return pointList;
	}

	// 設定の読み込み
	public List<Config> getConfig(UserID userID) {
		List<Config> configList;
		try {
			configList = cdao.getConfig(userID);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return configList;
	}

	// 目標・目的取得
	public GoalBean getGoal(String sheetName, UserID userID) {
		GoalBean bean = new GoalBean();
		bean.setGoal(new Goal("NULL"));
		bean.setPurpose(new Purpose("NULL"));
		URL SPREADSHEET_FEED_URL;
		try {
			SPREADSHEET_FEED_URL = new URL("https://spreadsheets.google.com/feeds/spreadsheets/private/full");
			// サービスアカウントメールアドレス
			String ACCOUNT_ID = "tatsuya-nakama@model-osprey-133506.iam.gserviceaccount.com";
			/*
			 * P12キー TomCatの作業フォルダがC:\a\pleiades\eclipse\だから それにあわせて変更する必要がある
			 * 現在はローカルの場合で合わせてる
			 */
			File p12 = new File("../workspace/DailyReportSatisfaction2/WebContent/WEB-INF/My Project-6af2244f80b5.p12");
			// サーバ上の場合
			// File p12 = new
			// File("./webapps/DailyReportSatisfaction2/WEB-INF/My
			// Project-6af2244f80b5.p12");

			HttpTransport httpTransport = new NetHttpTransport();
			JacksonFactory jsonFactory = new JacksonFactory();
			String[] SCOPESArray = { "https://spreadsheets.google.com/feeds",
					"https://spreadsheets.google.com/feeds/spreadsheets/private/full",
					"https://docs.google.com/feeds" };
			final List SCOPES = Arrays.asList(SCOPESArray);
			// 認証情報
			GoogleCredential credential = null;

			credential = new GoogleCredential.Builder().setTransport(httpTransport).setJsonFactory(jsonFactory)
					.setServiceAccountId(ACCOUNT_ID).setServiceAccountScopes(SCOPES)
					.setServiceAccountPrivateKeyFromP12File(p12).build();

			// リフレッシュトークン 必要ある？
			// credential.refreshToken();
			SpreadsheetService service = new SpreadsheetService("Mokuhyo");

			// 認証かける
			service.setOAuth2Credentials(credential);

			// 名前を指定してシート取得
			FeedURLFactory urlFactory = FeedURLFactory.getDefault();
			SpreadsheetQuery spreadsheetQuery = new SpreadsheetQuery(urlFactory.getSpreadsheetsFeedUrl());
			// シート名
			String sheet = sheetName;
			spreadsheetQuery.setTitleQuery("日報満足目標管理シート");
			SpreadsheetFeed spreadsheetFeed = null;
			spreadsheetFeed = service.query(spreadsheetQuery, SpreadsheetFeed.class);
			SpreadsheetEntry spreadsheetEntry = spreadsheetFeed.getEntries().get(0);
			// 名前を指定してワークシートを取得
			URL url = spreadsheetEntry.getWorksheetFeedUrl();
			WorksheetQuery query = new WorksheetQuery(url);
			query.setTitleQuery("目標");
			WorksheetFeed feed = null;
			feed = service.query(query, WorksheetFeed.class);
			List<WorksheetEntry> worksheetEntryList = feed.getEntries();
			WorksheetEntry worksheetEntry = worksheetEntryList.get(0);

			// ワークシート内を検索
			// 日付取得
			Date dt = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
			String day = sdf.format(dt);
			// ユーザＩＤ
			String id = userID.getUserID();
			id = "CS-362";
			ListQuery listQuery = new ListQuery(worksheetEntry.getListFeedUrl());
			listQuery.setSpreadsheetQuery("日付 = \"" + day + "\" && ユーザid = \"" + id + "\"");

			ListFeed listFeed = null;

			listFeed = service.query(listQuery, ListFeed.class);

			ListEntry listEntry = listFeed.getEntries().get(0);
			CustomElementCollection elements = listEntry.getCustomElements();

			Goal goal = new Goal(elements.getValue("本日の目標"));
			Purpose purpose = new Purpose(elements.getValue("目的"));
			bean.setGoal(goal);
			bean.setPurpose(purpose);
		} catch (MalformedURLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} catch (ServiceException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} catch (GeneralSecurityException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} catch (NullPointerException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		return bean;
	}

	// 下書きに目標・目的を適用する
	public List<Draft> setGoal(List<Draft> drafts, UserID userID) {
		GoalBean bean = new GoalBean();
		boolean goalFlag = true;
		for (Draft draft : drafts) {
			// 目標目的が含まれていたらスプレッドシートから取得してくる（初回のみ）
			if (draft.getSheetTab() != null && goalFlag) {
				try {
					bean = this.getGoal(draft.getSheetTab(), userID);
				} catch (RuntimeException e) {
					bean.setGoal(new Goal("スプレッドシートを取得できませんでした。"));
					bean.setPurpose(new Purpose("スプレッドシートを取得できませんでした。"));
				}
				goalFlag = false;
			}

			// 目標目的のセット
			if (draft.getType() != null && draft.getType().equals("目標")) {
				draft.setText(bean.getGoal().getGoal());
			} else if (draft.getType() != null && draft.getType().equals("目的")) {
				draft.setText(bean.getPurpose().getPurpose());
			}
		}
		return drafts;
	}

	public void setPoint(UserID userID, domain.valueo.Point pointWrite) {
		// 指摘事項の保存
		try {
			pdao.setPoint(pointWrite, userID);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

	}

	public void deletePoint(UserID userID, PointID pointID) {
		// 指摘事項の削除
		try {
			pdao.deletePoint(userID, pointID);

		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

	}

	// 下書き更新
	public void updateDraft(List<Draft> draftList) {
		try {
			for (Draft draft : draftList) {
				ddao.updateDraft(new DraftID(draft.getDraftID()), new Text(draft.getText()));
			}

		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	// ルールとテンプレートを特定し、下書きを読み込む
	public List<Draft> getDraft(UserID userID, DepartmentID departmentID) {
		List<Draft> drafts = null;
		TemplateID templateID = null;
		// 曜日取得
		// 1～7の数字で返ってくる(1が日曜)
		Calendar cal = Calendar.getInstance();
		int week = cal.get(Calendar.DAY_OF_WEEK);
		week--;
		String weekStr = String.valueOf(week);
		WeekDay weekDay = new WeekDay(weekStr);

		// ルールを特定し、テンプレートを決定
		try {
			TemplateRule tmp = trdao.getTemplateRuleID(weekDay, departmentID);
			if(tmp == null){
				templateID = new TemplateID("0001");
			}else{
			templateID = new TemplateID(tmp.getTEMPLATEID());
			}
			drafts = ddao.getAndInsertDraft(templateID, userID);

			//下書き読み込み
			drafts = ddao.getDraft(templateID, userID);
		} catch (SQLException e1) {
			e1.printStackTrace();
			throw new RuntimeException(e1);
		}
		return drafts;
	}

	// テンプレート手動選択
	public List<Draft> getSelectDraft(UserID userID, TemplateID templateID) {
		List<Draft> drafts = null;
		// 下書き読み込み
		try {
			drafts = ddao.getAndInsertDraft(templateID, userID);
		} catch (SQLException e1) {
			e1.printStackTrace();
			throw new RuntimeException(e1);
		}
		return drafts;
	}

	/* 件名自動生成メソッド */
	public String createMailTitle(User user) {
		String autoTitle = "【日報】"; // 自動生成する件名
		String userName = ""; // ユーザ名
		String trainer = ""; // トレーナ名
		String date = ""; // 日付

		// 今日の日付を取得
		Date d = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		date = sdf.format(d);

		Date date1 = null;
		Date date2 = null;

		try {
			date1 = DateFormat.getDateInstance().parse(date); // 現在の日付
			date2 = DateFormat.getDateInstance().parse("2016/05/16"); // トレーニング開始日
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		// 現在の日付とトレーニング開始日の差を算出
		long datetime1 = date1.getTime();
		long datetime2 = date2.getTime();
		long one_date_time = 1000 * 60 * 60 * 24;
		long diffDays = (datetime1 - datetime2) / one_date_time;
		int diff = (int) diffDays;

		// 曜日取得
		// 1～7の数字で返ってくる(1が日曜)
		Calendar cal = Calendar.getInstance();
		int week = cal.get(Calendar.DAY_OF_WEEK);

		// TrainingStartday ts = new TrainingStartday("5/16");
		// String trainingStartday = ts.toString();

		boolean flg = false;

		// int diff = trainingStartday.compareTo(date);

		// trueがトレーナA
		// 開始日が今日かつ月曜
		if (diff == 0 && week == 2) {
			flg = true;
		} else if ((diff == 1) || (diff == 2) || (diff == 3) || (diff == 4) || (diff == 14) || (diff == 15)
				|| (diff == 16) || (diff == 17) || (diff == 18) || (diff == 28) || (diff == 29) || (diff == 30)
				|| (diff == 31) || (diff == 32)) {
			flg = true;
		}

		// ユーザ名を取得
		userName = user.getName().getName(); // DBからユーザIDを使ってユーザ名を持ってくる

		// トレーナ名を取得
		try {
			if (flg == true) { // トレーナABどっちか判断する処理
				trainer = udao.getTrainerAName(user.getTrainerAID().getTrainerAID(), user.getUserID().getUserID());
			} else {
				trainer = udao.getTrainerBName(user.getTrainerBID().getTrainerBID(), user.getUserID().getUserID());
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

		// 日付を取得してdateに格納
		Date d2 = new Date();
		SimpleDateFormat sdf2 = new SimpleDateFormat("M/d");
		date = sdf2.format(d2);

		// 件名を生成する
		autoTitle = autoTitle + userName + " → " + trainer + " " + date;

		return autoTitle;
	}

	public List<Template> getTemplates() {
		List<Template> templates = null;
		try {
			templates = tdao.getAllTemplate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
		return templates;
	}

	// サニタイジング
	public List<Draft> convertSanitize(List<Draft> drafts) {
		if (drafts == null) {
			return drafts;
		}
		for (Draft draft : drafts) {
			String item = draft.getItemName();
			String text = draft.getText();
			if (item != null) {
				item = item.replaceAll("&", "&amp;");
				item = item.replaceAll("<", "&lt;");
				item = item.replaceAll(">", "&gt;");
				item = item.replaceAll("\"", "&quot;");
				item = item.replaceAll("'", "&#39;");
			}
			draft.setItemName(item);
			if (text != null) {
				text = text.replaceAll("&", "&amp;");
				text = text.replaceAll("<", "&lt;");
				text = text.replaceAll(">", "&gt;");
				text = text.replaceAll("\"", "&quot;");
				text = text.replaceAll("'", "&#39;");
			}
			draft.setText(text);
		}
		return drafts;
	}

	public List<Draft> setLastMail(List<Draft> drafts, UserID userID, String lastMail) {
		GoalBean bean = null;
		boolean goalFlag = true;

		for (Draft draft : drafts) {
			if (draft.getTemplateItemType() == TemplateItemType.MAIL_QUOTATION) {
				draft.setText(lastMail);
			}
		}
		return drafts;
	}
}
