package db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.User;
import domain.valueo.Communication;
import domain.valueo.DepartmentID;
import domain.valueo.Mailaddress;
import domain.valueo.Name;
import domain.valueo.Password;
import domain.valueo.Technology;
import domain.valueo.TrainerAID;
import domain.valueo.TrainerBID;
import domain.valueo.UserID;
import domain.valueo.Work;


public class UserDao extends Dao {
	public UserDao(Connection con) {
		super(con);
	}



	static private final String SELECT_SQL =
						  "select "
						+ "   USERID "
						+ " , PASSWORD "
						+ " , NAME"
						+ " , TRAINERAID "
						+ " , TRAINERBID "
						+ " , DEPARTMENTID "
						+ " , MAILADDRESS "
						+ " , TRAINGOAL1 "
						+ " , TRAINGOAL2 "
						+ " , TRAINGOAL3 "
						+ " from "
						+ "   USERTABLE "
						+ " where "
						+ "  USERID =? "
						+ " and "
						+ "  PASSWORD =?";

	public User getUser(String id,String password) throws SQLException
	{

		  PreparedStatement stmt = null;
		  ResultSet rset = null;
		  User user = null;

		  try{
			stmt = con.prepareStatement(SELECT_SQL);
			stmt.setString(1, id);
			stmt.setString(2, password);

			rset = stmt.executeQuery();

			while (rset.next())
				{

					user = new User(null, null, null, null, null, null, null, null, null, null);

					user.setUserID(new UserID( rset.getString(1) ) );
					user.setPassword(new Password(rset.getString(2)) );
					user.setName(new Name(rset.getString(3)));
					user.setTrainerAID(new TrainerAID(rset.getString(4)));
					user.setTrainerBID(new TrainerBID(rset.getString(5)));
					user.setDepartmentID(new DepartmentID(rset.getString(6)));
					user.setMailAddress(new Mailaddress(rset.getString(7)));
					user.setCommunication(new Communication(rset.getString(8)));
					user.setWork(new Work(rset.getString(9)));
					user.setTechnology(new Technology(rset.getString(10)));
				}
		  }
		catch (SQLException  e) {
			throw e;
		}

		finally{

			if(stmt != null){
			  try {
				stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
				throw e;
			}
			  stmt = null;
			}
			if(rset != null){
			  try {
				rset.close();
			} catch (SQLException e) {
				e.printStackTrace();
				throw e;
			}
			  rset = null;
			}
		}

		return user;
	}


	static private final String INSERT_SQL =
			  "insert "
			+ "   into USERTABLE "
			+ "("
			+ " USERID "
			+ " ,PASSWORD "
			+ " ,NAME "
			+ " ,TRAINERAID"
			+ " ,TRAINERBID"
			+ " ,DEPARTMENTID"
			+ " ,MAILADDRESS"
			+ ")"
			+ "values "
			+ "("
			+ " ? "
			+ " ,? "
			+ " ,? "
			+ " ,? "
			+ " ,? "
			+ " ,?"
			+ " ,?"
			+ ")";

	public void createUser(User user) throws SQLException
	{
		PreparedStatement stmt = null;
		ResultSet rset = null;


		try{
			/* Statementの作成 */
			stmt = con.prepareStatement(INSERT_SQL);
			stmt.setString(1, user.getUserID().getUserID());
			stmt.setString(2, user.getPassword().getPassword());
			stmt.setString(3, user.getName().getName());
			stmt.setString(4, user.getTrainerAID().getTrainerAID());
			stmt.setString(5, user.getTrainerBID().getTrainerBID());
			stmt.setString(6, user.getDepartmentID().getDepartmentID());
			stmt.setString(7, user.getMailAddress().getMailaddress());

			/* ｓｑｌ実行 */
			int lineCount = stmt.executeUpdate();

		     if( lineCount != 1 )
		     {
		    	 throw new SQLException("登録できません. ID:" + user.getUserID());
		     }

		  }
		catch (SQLException e)
		{
			throw e;
		}
		finally{
			if(stmt != null){
			  try {
				stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
				throw new RuntimeException(e);
			}
			  stmt = null;
			}
		}

	}

	// トレーナA名を取得
	public String getTrainerAName(String trainerAID, String userID) throws SQLException{

		PreparedStatement stmt = null;
		ResultSet rset = null;

		String trainerAName = "";			// トレーナ名

		try{
			stmt = con.prepareStatement(
						  "select"
						+ "  NAME "
						+ "from"
						+ "  TRAINERATABLE "
						+ "where"
						+ "  USERID = ? "
						+ "    and "
						+ "  TRAINERAID = ?"
						);

			// ?にユーザIDをセット
			stmt.setString(1, userID);
			stmt.setString(2, trainerAID);

			// SQL実行
			rset = stmt.executeQuery();

			// SQLの結果を文字列化
			while (rset.next()){
				trainerAName = rset.getString(1);
			}

		}catch (SQLException e){
			throw e;
		}catch ( Exception e){
			throw e;
		}finally{
			if(stmt != null){
			  stmt.close();
			  stmt = null;
			}
			if(rset != null){
			  rset.close();
			  rset = null;
			}
		}

		return trainerAName;
	}

	// トレーナB名を取得
	public String getTrainerBName(String trainerBID, String userID) throws SQLException{

		PreparedStatement stmt = null;
		ResultSet rset = null;

		String trainerBName = null;			// トレーナ名

		try{
			stmt = con.prepareStatement(
						  "select"
						+ "  NAME "
						+ "from"
						+ "  TRAINERBTABLE "
						+ "where"
						+ "  USERID = ? "
						+ "    and "
						+ "  TRAINERBID = ?"
						);

			// ?にユーザIDをセット
			stmt.setString(1, userID);
			stmt.setString(2, trainerBID);

			// SQL実行
			rset = stmt.executeQuery();

			// SQLの結果を文字列化
			while (rset.next()){
				trainerBName = rset.getString(1);
			}

		}catch (SQLException e){
			throw e;
		}catch ( Exception e){
			throw e;
		}finally{
			if(stmt != null){
			  stmt.close();
			  stmt = null;
			}
			if(rset != null){
			  rset.close();
			  rset = null;
			}
		}

		return trainerBName;
	}

}
